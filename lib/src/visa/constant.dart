/*= from visa.h =================================*/

/*- Attributes (platform independent size) ----------------------------------*/

const int VI_ATTR_RSRC_CLASS = 0xBFFF0001;
const int VI_ATTR_RSRC_NAME = 0xBFFF0002;
const int VI_ATTR_RSRC_IMPL_VERSION = 0x3FFF0003;
const int VI_ATTR_RSRC_LOCK_STATE = 0x3FFF0004;
const int VI_ATTR_MAX_QUEUE_LENGTH = 0x3FFF0005;
const int VI_ATTR_USER_DATA_32 = 0x3FFF0007;
const int VI_ATTR_FDC_CHNL = 0x3FFF000D;
const int VI_ATTR_FDC_MODE = 0x3FFF000F;
const int VI_ATTR_FDC_GEN_SIGNAL_EN = 0x3FFF0011;
const int VI_ATTR_FDC_USE_PAIR = 0x3FFF0013;
const int VI_ATTR_SEND_END_EN = 0x3FFF0016;
const int VI_ATTR_TERMCHAR = 0x3FFF0018;
const int VI_ATTR_TMO_VALUE = 0x3FFF001A;
const int VI_ATTR_GPIB_READDR_EN = 0x3FFF001B;
const int VI_ATTR_IO_PROT = 0x3FFF001C;
const int VI_ATTR_DMA_ALLOW_EN = 0x3FFF001E;
const int VI_ATTR_ASRL_BAUD = 0x3FFF0021;
const int VI_ATTR_ASRL_DATA_BITS = 0x3FFF0022;
const int VI_ATTR_ASRL_PARITY = 0x3FFF0023;
const int VI_ATTR_ASRL_STOP_BITS = 0x3FFF0024;
const int VI_ATTR_ASRL_FLOW_CNTRL = 0x3FFF0025;
const int VI_ATTR_RD_BUF_OPER_MODE = 0x3FFF002A;
const int VI_ATTR_RD_BUF_SIZE = 0x3FFF002B;
const int VI_ATTR_WR_BUF_OPER_MODE = 0x3FFF002D;
const int VI_ATTR_WR_BUF_SIZE = 0x3FFF002E;
const int VI_ATTR_SUPPRESS_END_EN = 0x3FFF0036;
const int VI_ATTR_TERMCHAR_EN = 0x3FFF0038;
const int VI_ATTR_DEST_ACCESS_PRIV = 0x3FFF0039;
const int VI_ATTR_DEST_BYTE_ORDER = 0x3FFF003A;
const int VI_ATTR_SRC_ACCESS_PRIV = 0x3FFF003C;
const int VI_ATTR_SRC_BYTE_ORDER = 0x3FFF003D;
const int VI_ATTR_SRC_INCREMENT = 0x3FFF0040;
const int VI_ATTR_DEST_INCREMENT = 0x3FFF0041;
const int VI_ATTR_WIN_ACCESS_PRIV = 0x3FFF0045;
const int VI_ATTR_WIN_BYTE_ORDER = 0x3FFF0047;
const int VI_ATTR_GPIB_ATN_STATE = 0x3FFF0057;
const int VI_ATTR_GPIB_ADDR_STATE = 0x3FFF005C;
const int VI_ATTR_GPIB_CIC_STATE = 0x3FFF005E;
const int VI_ATTR_GPIB_NDAC_STATE = 0x3FFF0062;
const int VI_ATTR_GPIB_SRQ_STATE = 0x3FFF0067;
const int VI_ATTR_GPIB_SYS_CNTRL_STATE = 0x3FFF0068;
const int VI_ATTR_GPIB_HS488_CBL_LEN = 0x3FFF0069;
const int VI_ATTR_CMDR_LA = 0x3FFF006B;
const int VI_ATTR_VXI_DEV_CLASS = 0x3FFF006C;
const int VI_ATTR_MAINFRAME_LA = 0x3FFF0070;
const int VI_ATTR_MANF_NAME = 0xBFFF0072;
const int VI_ATTR_MODEL_NAME = 0xBFFF0077;
const int VI_ATTR_VXI_VME_INTR_STATUS = 0x3FFF008B;
const int VI_ATTR_VXI_TRIG_STATUS = 0x3FFF008D;
const int VI_ATTR_VXI_VME_SYSFAIL_STATE = 0x3FFF0094;
const int VI_ATTR_WIN_BASE_ADDR_32 = 0x3FFF0098;
const int VI_ATTR_WIN_SIZE_32 = 0x3FFF009A;
const int VI_ATTR_ASRL_AVAIL_NUM = 0x3FFF00AC;
const int VI_ATTR_MEM_BASE_32 = 0x3FFF00AD;
const int VI_ATTR_ASRL_CTS_STATE = 0x3FFF00AE;
const int VI_ATTR_ASRL_DCD_STATE = 0x3FFF00AF;
const int VI_ATTR_ASRL_DSR_STATE = 0x3FFF00B1;
const int VI_ATTR_ASRL_DTR_STATE = 0x3FFF00B2;
const int VI_ATTR_ASRL_END_IN = 0x3FFF00B3;
const int VI_ATTR_ASRL_END_OUT = 0x3FFF00B4;
const int VI_ATTR_ASRL_REPLACE_CHAR = 0x3FFF00BE;
const int VI_ATTR_ASRL_RI_STATE = 0x3FFF00BF;
const int VI_ATTR_ASRL_RTS_STATE = 0x3FFF00C0;
const int VI_ATTR_ASRL_XON_CHAR = 0x3FFF00C1;
const int VI_ATTR_ASRL_XOFF_CHAR = 0x3FFF00C2;
const int VI_ATTR_WIN_ACCESS = 0x3FFF00C3;
const int VI_ATTR_RM_SESSION = 0x3FFF00C4;
const int VI_ATTR_VXI_LA = 0x3FFF00D5;
const int VI_ATTR_MANF_ID = 0x3FFF00D9;
const int VI_ATTR_MEM_SIZE_32 = 0x3FFF00DD;
const int VI_ATTR_MEM_SPACE = 0x3FFF00DE;
const int VI_ATTR_MODEL_CODE = 0x3FFF00DF;
const int VI_ATTR_SLOT = 0x3FFF00E8;
const int VI_ATTR_INTF_INST_NAME = 0xBFFF00E9;
const int VI_ATTR_IMMEDIATE_SERV = 0x3FFF0100;
const int VI_ATTR_INTF_PARENT_NUM = 0x3FFF0101;
const int VI_ATTR_RSRC_SPEC_VERSION = 0x3FFF0170;
const int VI_ATTR_INTF_TYPE = 0x3FFF0171;
const int VI_ATTR_GPIB_PRIMARY_ADDR = 0x3FFF0172;
const int VI_ATTR_GPIB_SECONDARY_ADDR = 0x3FFF0173;
const int VI_ATTR_RSRC_MANF_NAME = 0xBFFF0174;
const int VI_ATTR_RSRC_MANF_ID = 0x3FFF0175;
const int VI_ATTR_INTF_NUM = 0x3FFF0176;
const int VI_ATTR_TRIG_ID = 0x3FFF0177;
const int VI_ATTR_GPIB_REN_STATE = 0x3FFF0181;
const int VI_ATTR_GPIB_UNADDR_EN = 0x3FFF0184;
const int VI_ATTR_DEV_STATUS_BYTE = 0x3FFF0189;
const int VI_ATTR_FILE_APPEND_EN = 0x3FFF0192;
const int VI_ATTR_VXI_TRIG_SUPPORT = 0x3FFF0194;
const int VI_ATTR_TCPIP_ADDR = 0xBFFF0195;
const int VI_ATTR_TCPIP_HOSTNAME = 0xBFFF0196;
const int VI_ATTR_TCPIP_PORT = 0x3FFF0197;
const int VI_ATTR_TCPIP_DEVICE_NAME = 0xBFFF0199;
const int VI_ATTR_TCPIP_NODELAY = 0x3FFF019A;
const int VI_ATTR_TCPIP_KEEPALIVE = 0x3FFF019B;
const int VI_ATTR_4882_COMPLIANT = 0x3FFF019F;
const int VI_ATTR_USB_SERIAL_NUM = 0xBFFF01A0;
const int VI_ATTR_USB_INTFC_NUM = 0x3FFF01A1;
const int VI_ATTR_USB_PROTOCOL = 0x3FFF01A7;
const int VI_ATTR_USB_MAX_INTR_SIZE = 0x3FFF01AF;
const int VI_ATTR_PXI_DEV_NUM = 0x3FFF0201;
const int VI_ATTR_PXI_FUNC_NUM = 0x3FFF0202;
const int VI_ATTR_PXI_BUS_NUM = 0x3FFF0205;
const int VI_ATTR_PXI_CHASSIS = 0x3FFF0206;
const int VI_ATTR_PXI_SLOTPATH = 0xBFFF0207;
const int VI_ATTR_PXI_SLOT_LBUS_LEFT = 0x3FFF0208;
const int VI_ATTR_PXI_SLOT_LBUS_RIGHT = 0x3FFF0209;
const int VI_ATTR_PXI_TRIG_BUS = 0x3FFF020A;
const int VI_ATTR_PXI_STAR_TRIG_BUS = 0x3FFF020B;
const int VI_ATTR_PXI_STAR_TRIG_LINE = 0x3FFF020C;
const int VI_ATTR_PXI_SRC_TRIG_BUS = 0x3FFF020D;
const int VI_ATTR_PXI_DEST_TRIG_BUS = 0x3FFF020E;
const int VI_ATTR_PXI_MEM_TYPE_BAR0 = 0x3FFF0211;
const int VI_ATTR_PXI_MEM_TYPE_BAR1 = 0x3FFF0212;
const int VI_ATTR_PXI_MEM_TYPE_BAR2 = 0x3FFF0213;
const int VI_ATTR_PXI_MEM_TYPE_BAR3 = 0x3FFF0214;
const int VI_ATTR_PXI_MEM_TYPE_BAR4 = 0x3FFF0215;
const int VI_ATTR_PXI_MEM_TYPE_BAR5 = 0x3FFF0216;
const int VI_ATTR_PXI_MEM_BASE_BAR0_32 = 0x3FFF0221;
const int VI_ATTR_PXI_MEM_BASE_BAR1_32 = 0x3FFF0222;
const int VI_ATTR_PXI_MEM_BASE_BAR2_32 = 0x3FFF0223;
const int VI_ATTR_PXI_MEM_BASE_BAR3_32 = 0x3FFF0224;
const int VI_ATTR_PXI_MEM_BASE_BAR4_32 = 0x3FFF0225;
const int VI_ATTR_PXI_MEM_BASE_BAR5_32 = 0x3FFF0226;
const int VI_ATTR_PXI_MEM_BASE_BAR0_64 = 0x3FFF0228;
const int VI_ATTR_PXI_MEM_BASE_BAR1_64 = 0x3FFF0229;
const int VI_ATTR_PXI_MEM_BASE_BAR2_64 = 0x3FFF022A;
const int VI_ATTR_PXI_MEM_BASE_BAR3_64 = 0x3FFF022B;
const int VI_ATTR_PXI_MEM_BASE_BAR4_64 = 0x3FFF022C;
const int VI_ATTR_PXI_MEM_BASE_BAR5_64 = 0x3FFF022D;
const int VI_ATTR_PXI_MEM_SIZE_BAR0_32 = 0x3FFF0231;
const int VI_ATTR_PXI_MEM_SIZE_BAR1_32 = 0x3FFF0232;
const int VI_ATTR_PXI_MEM_SIZE_BAR2_32 = 0x3FFF0233;
const int VI_ATTR_PXI_MEM_SIZE_BAR3_32 = 0x3FFF0234;
const int VI_ATTR_PXI_MEM_SIZE_BAR4_32 = 0x3FFF0235;
const int VI_ATTR_PXI_MEM_SIZE_BAR5_32 = 0x3FFF0236;
const int VI_ATTR_PXI_MEM_SIZE_BAR0_64 = 0x3FFF0238;
const int VI_ATTR_PXI_MEM_SIZE_BAR1_64 = 0x3FFF0239;
const int VI_ATTR_PXI_MEM_SIZE_BAR2_64 = 0x3FFF023A;
const int VI_ATTR_PXI_MEM_SIZE_BAR3_64 = 0x3FFF023B;
const int VI_ATTR_PXI_MEM_SIZE_BAR4_64 = 0x3FFF023C;
const int VI_ATTR_PXI_MEM_SIZE_BAR5_64 = 0x3FFF023D;
const int VI_ATTR_PXI_IS_EXPRESS = 0x3FFF0240;
const int VI_ATTR_PXI_SLOT_LWIDTH = 0x3FFF0241;
const int VI_ATTR_PXI_MAX_LWIDTH = 0x3FFF0242;
const int VI_ATTR_PXI_ACTUAL_LWIDTH = 0x3FFF0243;
const int VI_ATTR_PXI_DSTAR_BUS = 0x3FFF0244;
const int VI_ATTR_PXI_DSTAR_SET = 0x3FFF0245;
const int VI_ATTR_PXI_ALLOW_WRITE_COMBINE = 0x3FFF0246;
const int VI_ATTR_TCPIP_HISLIP_OVERLAP_EN = 0x3FFF0300;
const int VI_ATTR_TCPIP_HISLIP_VERSION = 0x3FFF0301;
const int VI_ATTR_TCPIP_HISLIP_MAX_MESSAGE_KB = 0x3FFF0302;
const int VI_ATTR_TCPIP_IS_HISLIP = 0x3FFF0303;

const int VI_ATTR_JOB_ID = 0x3FFF4006;
const int VI_ATTR_EVENT_TYPE = 0x3FFF4010;
const int VI_ATTR_SIGP_STATUS_ID = 0x3FFF4011;
const int VI_ATTR_RECV_TRIG_ID = 0x3FFF4012;
const int VI_ATTR_INTR_STATUS_ID = 0x3FFF4023;
const int VI_ATTR_STATUS = 0x3FFF4025;
const int VI_ATTR_RET_COUNT_32 = 0x3FFF4026;
const int VI_ATTR_BUFFER = 0x3FFF4027;
const int VI_ATTR_RECV_INTR_LEVEL = 0x3FFF4041;
const int VI_ATTR_OPER_NAME = 0xBFFF4042;
const int VI_ATTR_GPIB_RECV_CIC_STATE = 0x3FFF4193;
const int VI_ATTR_RECV_TCPIP_ADDR = 0xBFFF4198;
const int VI_ATTR_USB_RECV_INTR_SIZE = 0x3FFF41B0;
const int VI_ATTR_USB_RECV_INTR_DATA = 0xBFFF41B1;
const int VI_ATTR_PXI_RECV_INTR_SEQ = 0x3FFF4240;
const int VI_ATTR_PXI_RECV_INTR_DATA = 0x3FFF4241;

/*- Attributes (platform dependent size) ------------------------------------*/

const int VI_ATTR_USER_DATA = 0x3FFF000A;
const int VI_ATTR_RET_COUNT= 0x3FFF4028;

const int VI_ATTR_WIN_BASE_ADDR = 0x3FFF009B;
const int VI_ATTR_WIN_SIZE = 0x3FFF009C;
const int VI_ATTR_MEM_BASE = 0x3FFF00D0;
const int VI_ATTR_MEM_SIZE = 0x3FFF00D1;
const int VI_ATTR_PXI_MEM_BASE_BAR0 = VI_ATTR_PXI_MEM_BASE_BAR0_64;
const int VI_ATTR_PXI_MEM_BASE_BAR1 = VI_ATTR_PXI_MEM_BASE_BAR1_64;
const int VI_ATTR_PXI_MEM_BASE_BAR2 = VI_ATTR_PXI_MEM_BASE_BAR2_64;
const int VI_ATTR_PXI_MEM_BASE_BAR3 = VI_ATTR_PXI_MEM_BASE_BAR3_64;
const int VI_ATTR_PXI_MEM_BASE_BAR4 = VI_ATTR_PXI_MEM_BASE_BAR4_64;
const int VI_ATTR_PXI_MEM_BASE_BAR5 = VI_ATTR_PXI_MEM_BASE_BAR5_64;
const int VI_ATTR_PXI_MEM_SIZE_BAR0 = VI_ATTR_PXI_MEM_SIZE_BAR0_64;
const int VI_ATTR_PXI_MEM_SIZE_BAR1 = VI_ATTR_PXI_MEM_SIZE_BAR1_64;
const int VI_ATTR_PXI_MEM_SIZE_BAR2 = VI_ATTR_PXI_MEM_SIZE_BAR2_64;
const int VI_ATTR_PXI_MEM_SIZE_BAR3 = VI_ATTR_PXI_MEM_SIZE_BAR3_64;
const int VI_ATTR_PXI_MEM_SIZE_BAR4 = VI_ATTR_PXI_MEM_SIZE_BAR4_64;
const int VI_ATTR_PXI_MEM_SIZE_BAR5 = VI_ATTR_PXI_MEM_SIZE_BAR5_64;

/*- Event Types -------------------------------------------------------------*/

const int VI_EVENT_IO_COMPLETION = 0x3FFF2009;
const int VI_EVENT_TRIG = 0xBFFF200A;
const int VI_EVENT_SERVICE_REQ = 0x3FFF200B;
const int VI_EVENT_CLEAR = 0x3FFF200D;
const int VI_EVENT_EXCEPTION = 0xBFFF200E;
const int VI_EVENT_GPIB_CIC = 0x3FFF2012;
const int VI_EVENT_GPIB_TALK = 0x3FFF2013;
const int VI_EVENT_GPIB_LISTEN = 0x3FFF2014;
const int VI_EVENT_VXI_VME_SYSFAIL = 0x3FFF201D;
const int VI_EVENT_VXI_VME_SYSRESET = 0x3FFF201E;
const int VI_EVENT_VXI_SIGP = 0x3FFF2020;
const int VI_EVENT_VXI_VME_INTR = 0xBFFF2021;
const int VI_EVENT_PXI_INTR = 0x3FFF2022;
const int VI_EVENT_TCPIP_CONNECT = 0x3FFF2036;
const int VI_EVENT_USB_INTR = 0x3FFF2037;

const int VI_ALL_ENABLED_EVENTS = 0x3FFF7FFF;

/*- Completion and Error Codes ----------------------------------------------*/

const int VI_SUCCESS_EVENT_EN = 0x3FFF0002; /* 3FFF0002, 1073676290 */
const int VI_SUCCESS_EVENT_DIS = 0x3FFF0003; /* 3FFF0003, 1073676291 */
const int VI_SUCCESS_QUEUE_EMPTY = 0x3FFF0004; /* 3FFF0004, 1073676292 */
const int VI_SUCCESS_TERM_CHAR = 0x3FFF0005; /* 3FFF0005, 1073676293 */
const int VI_SUCCESS_MAX_CNT = 0x3FFF0006; /* 3FFF0006, 1073676294 */
const int VI_SUCCESS_DEV_NPRESENT = 0x3FFF007D; /* 3FFF007D, 1073676413 */
const int VI_SUCCESS_TRIG_MAPPED = 0x3FFF007E; /* 3FFF007E, 1073676414 */
const int VI_SUCCESS_QUEUE_NEMPTY = 0x3FFF0080; /* 3FFF0080, 1073676416 */
const int VI_SUCCESS_NCHAIN = 0x3FFF0098; /* 3FFF0098, 1073676440 */
const int VI_SUCCESS_NESTED_SHARED = 0x3FFF0099; /* 3FFF0099, 1073676441 */
const int VI_SUCCESS_NESTED_EXCLUSIVE = 0x3FFF009A; /* 3FFF009A, 1073676442 */
const int VI_SUCCESS_SYNC = 0x3FFF009B; /* 3FFF009B, 1073676443 */

const int VI_WARN_QUEUE_OVERFLOW = 0x3FFF000C; /* 3FFF000C, 1073676300 */
const int VI_WARN_CONFIG_NLOADED = 0x3FFF0077; /* 3FFF0077, 1073676407 */
const int VI_WARN_NULL_OBJECT = 0x3FFF0082; /* 3FFF0082, 1073676418 */
const int VI_WARN_NSUP_ATTR_STATE = 0x3FFF0084; /* 3FFF0084, 1073676420 */
const int VI_WARN_UNKNOWN_STATUS = 0x3FFF0085; /* 3FFF0085, 1073676421 */
const int VI_WARN_NSUP_BUF = 0x3FFF0088; /* 3FFF0088, 1073676424 */
const int VI_WARN_EXT_FUNC_NIMPL = 0x3FFF00A9; /* 3FFF00A9, 1073676457 */

const int _VI_ERROR = 0x80000000;  /* 0x80000000 */

const int VI_ERROR_SYSTEM_ERROR = _VI_ERROR + 0x3FFF0000; /* BFFF0000, -1073807360 */
const int VI_ERROR_INV_OBJECT = _VI_ERROR + 0x3FFF000E; /* BFFF000E, -1073807346 */
const int VI_ERROR_RSRC_LOCKED = _VI_ERROR + 0x3FFF000F; /* BFFF000F, -1073807345 */
const int VI_ERROR_INV_EXPR = _VI_ERROR + 0x3FFF0010; /* BFFF0010, -1073807344 */
const int VI_ERROR_RSRC_NFOUND = _VI_ERROR + 0x3FFF0011; /* BFFF0011, -1073807343 */
const int VI_ERROR_INV_RSRC_NAME = _VI_ERROR + 0x3FFF0012; /* BFFF0012, -1073807342 */
const int VI_ERROR_INV_ACC_MODE = _VI_ERROR + 0x3FFF0013; /* BFFF0013, -1073807341 */
const int VI_ERROR_TMO = _VI_ERROR + 0x3FFF0015; /* BFFF0015, -1073807339 */
const int VI_ERROR_CLOSING_FAILED = _VI_ERROR + 0x3FFF0016; /* BFFF0016, -1073807338 */
const int VI_ERROR_INV_DEGREE = _VI_ERROR + 0x3FFF001B; /* BFFF001B, -1073807333 */
const int VI_ERROR_INV_JOB_ID = _VI_ERROR + 0x3FFF001C; /* BFFF001C, -1073807332 */
const int VI_ERROR_NSUP_ATTR = _VI_ERROR + 0x3FFF001D; /* BFFF001D, -1073807331 */
const int VI_ERROR_NSUP_ATTR_STATE = _VI_ERROR + 0x3FFF001E; /* BFFF001E, -1073807330 */
const int VI_ERROR_ATTR_READONLY = _VI_ERROR + 0x3FFF001F; /* BFFF001F, -1073807329 */
const int VI_ERROR_INV_LOCK_TYPE = _VI_ERROR + 0x3FFF0020; /* BFFF0020, -1073807328 */
const int VI_ERROR_INV_ACCESS_KEY = _VI_ERROR + 0x3FFF0021; /* BFFF0021, -1073807327 */
const int VI_ERROR_INV_EVENT = _VI_ERROR + 0x3FFF0026; /* BFFF0026, -1073807322 */
const int VI_ERROR_INV_MECH = _VI_ERROR + 0x3FFF0027; /* BFFF0027, -1073807321 */
const int VI_ERROR_HNDLR_NINSTALLED = _VI_ERROR + 0x3FFF0028; /* BFFF0028, -1073807320 */
const int VI_ERROR_INV_HNDLR_REF = _VI_ERROR + 0x3FFF0029; /* BFFF0029, -1073807319 */
const int VI_ERROR_INV_CONTEXT = _VI_ERROR + 0x3FFF002A; /* BFFF002A, -1073807318 */
const int VI_ERROR_QUEUE_OVERFLOW = _VI_ERROR + 0x3FFF002D; /* BFFF002D, -1073807315 */
const int VI_ERROR_NENABLED = _VI_ERROR + 0x3FFF002F; /* BFFF002F, -1073807313 */
const int VI_ERROR_ABORT = _VI_ERROR + 0x3FFF0030; /* BFFF0030, -1073807312 */
const int VI_ERROR_RAW_WR_PROT_VIOL = _VI_ERROR + 0x3FFF0034; /* BFFF0034, -1073807308 */
const int VI_ERROR_RAW_RD_PROT_VIOL = _VI_ERROR + 0x3FFF0035; /* BFFF0035, -1073807307 */
const int VI_ERROR_OUTP_PROT_VIOL = _VI_ERROR + 0x3FFF0036; /* BFFF0036, -1073807306 */
const int VI_ERROR_INP_PROT_VIOL = _VI_ERROR + 0x3FFF0037; /* BFFF0037, -1073807305 */
const int VI_ERROR_BERR = _VI_ERROR + 0x3FFF0038; /* BFFF0038, -1073807304 */
const int VI_ERROR_IN_PROGRESS = _VI_ERROR + 0x3FFF0039; /* BFFF0039, -1073807303 */
const int VI_ERROR_INV_SETUP = _VI_ERROR + 0x3FFF003A; /* BFFF003A, -1073807302 */
const int VI_ERROR_QUEUE_ERROR = _VI_ERROR + 0x3FFF003B; /* BFFF003B, -1073807301 */
const int VI_ERROR_ALLOC = _VI_ERROR + 0x3FFF003C; /* BFFF003C, -1073807300 */
const int VI_ERROR_INV_MASK = _VI_ERROR + 0x3FFF003D; /* BFFF003D, -1073807299 */
const int VI_ERROR_IO = _VI_ERROR + 0x3FFF003E; /* BFFF003E, -1073807298 */
const int VI_ERROR_INV_FMT = _VI_ERROR + 0x3FFF003F; /* BFFF003F, -1073807297 */
const int VI_ERROR_NSUP_FMT = _VI_ERROR + 0x3FFF0041; /* BFFF0041, -1073807295 */
const int VI_ERROR_LINE_IN_USE = _VI_ERROR + 0x3FFF0042; /* BFFF0042, -1073807294 */
const int VI_ERROR_LINE_NRESERVED = _VI_ERROR + 0x3FFF0043; /* BFFF0043, -1073807293 */
const int VI_ERROR_NSUP_MODE = _VI_ERROR + 0x3FFF0046; /* BFFF0046, -1073807290 */
const int VI_ERROR_SRQ_NOCCURRED = _VI_ERROR + 0x3FFF004A; /* BFFF004A, -1073807286 */
const int VI_ERROR_INV_SPACE = _VI_ERROR + 0x3FFF004E; /* BFFF004E, -1073807282 */
const int VI_ERROR_INV_OFFSET = _VI_ERROR + 0x3FFF0051; /* BFFF0051, -1073807279 */
const int VI_ERROR_INV_WIDTH = _VI_ERROR + 0x3FFF0052; /* BFFF0052, -1073807278 */
const int VI_ERROR_NSUP_OFFSET = _VI_ERROR + 0x3FFF0054; /* BFFF0054, -1073807276 */
const int VI_ERROR_NSUP_VAR_WIDTH = _VI_ERROR + 0x3FFF0055; /* BFFF0055, -1073807275 */
const int VI_ERROR_WINDOW_NMAPPED = _VI_ERROR + 0x3FFF0057; /* BFFF0057, -1073807273 */
const int VI_ERROR_RESP_PENDING = _VI_ERROR + 0x3FFF0059; /* BFFF0059, -1073807271 */
const int VI_ERROR_NLISTENERS = _VI_ERROR + 0x3FFF005F; /* BFFF005F, -1073807265 */
const int VI_ERROR_NCIC = _VI_ERROR + 0x3FFF0060; /* BFFF0060, -1073807264 */
const int VI_ERROR_NSYS_CNTLR = _VI_ERROR + 0x3FFF0061; /* BFFF0061, -1073807263 */
const int VI_ERROR_NSUP_OPER = _VI_ERROR + 0x3FFF0067; /* BFFF0067, -1073807257 */
const int VI_ERROR_INTR_PENDING = _VI_ERROR + 0x3FFF0068; /* BFFF0068, -1073807256 */
const int VI_ERROR_ASRL_PARITY = _VI_ERROR + 0x3FFF006A; /* BFFF006A, -1073807254 */
const int VI_ERROR_ASRL_FRAMING = _VI_ERROR + 0x3FFF006B; /* BFFF006B, -1073807253 */
const int VI_ERROR_ASRL_OVERRUN = _VI_ERROR + 0x3FFF006C; /* BFFF006C, -1073807252 */
const int VI_ERROR_TRIG_NMAPPED = _VI_ERROR + 0x3FFF006E; /* BFFF006E, -1073807250 */
const int VI_ERROR_NSUP_ALIGN_OFFSET = _VI_ERROR + 0x3FFF0070; /* BFFF0070, -1073807248 */
const int VI_ERROR_USER_BUF = _VI_ERROR + 0x3FFF0071; /* BFFF0071, -1073807247 */
const int VI_ERROR_RSRC_BUSY = _VI_ERROR + 0x3FFF0072; /* BFFF0072, -1073807246 */
const int VI_ERROR_NSUP_WIDTH = _VI_ERROR + 0x3FFF0076; /* BFFF0076, -1073807242 */
const int VI_ERROR_INV_PARAMETER = _VI_ERROR + 0x3FFF0078; /* BFFF0078, -1073807240 */
const int VI_ERROR_INV_PROT = _VI_ERROR + 0x3FFF0079; /* BFFF0079, -1073807239 */
const int VI_ERROR_INV_SIZE = _VI_ERROR + 0x3FFF007B; /* BFFF007B, -1073807237 */
const int VI_ERROR_WINDOW_MAPPED = _VI_ERROR + 0x3FFF0080; /* BFFF0080, -1073807232 */
const int VI_ERROR_NIMPL_OPER = _VI_ERROR + 0x3FFF0081; /* BFFF0081, -1073807231 */
const int VI_ERROR_INV_LENGTH = _VI_ERROR + 0x3FFF0083; /* BFFF0083, -1073807229 */
const int VI_ERROR_INV_MODE = _VI_ERROR + 0x3FFF0091; /* BFFF0091, -1073807215 */
const int VI_ERROR_SESN_NLOCKED = _VI_ERROR + 0x3FFF009C; /* BFFF009C, -1073807204 */
const int VI_ERROR_MEM_NSHARED = _VI_ERROR + 0x3FFF009D; /* BFFF009D, -1073807203 */
const int VI_ERROR_LIBRARY_NFOUND = _VI_ERROR + 0x3FFF009E; /* BFFF009E, -1073807202 */
const int VI_ERROR_NSUP_INTR = _VI_ERROR + 0x3FFF009F; /* BFFF009F, -1073807201 */
const int VI_ERROR_INV_LINE = _VI_ERROR + 0x3FFF00A0; /* BFFF00A0, -1073807200 */
const int VI_ERROR_FILE_ACCESS = _VI_ERROR + 0x3FFF00A1; /* BFFF00A1, -1073807199 */
const int VI_ERROR_FILE_IO = _VI_ERROR + 0x3FFF00A2; /* BFFF00A2, -1073807198 */
const int VI_ERROR_NSUP_LINE = _VI_ERROR + 0x3FFF00A3; /* BFFF00A3, -1073807197 */
const int VI_ERROR_NSUP_MECH = _VI_ERROR + 0x3FFF00A4; /* BFFF00A4, -1073807196 */
const int VI_ERROR_INTF_NUM_NCONFIG = _VI_ERROR + 0x3FFF00A5; /* BFFF00A5, -1073807195 */
const int VI_ERROR_CONN_LOST = _VI_ERROR + 0x3FFF00A6; /* BFFF00A6, -1073807194 */
const int VI_ERROR_MACHINE_NAVAIL = _VI_ERROR + 0x3FFF00A7; /* BFFF00A7, -1073807193 */
const int VI_ERROR_NPERMISSION = _VI_ERROR + 0x3FFF00A8; /* BFFF00A8, -1073807192 */

/*- Other VISA Definitions --------------------------------------------------*/

const int VI_FIND_BUFLEN = 256;

const int VI_INTF_GPIB = 1;
const int VI_INTF_VXI = 2;
const int VI_INTF_GPIB_VXI = 3;
const int VI_INTF_ASRL = 4;
const int VI_INTF_PXI = 5;
const int VI_INTF_TCPIP = 6;
const int VI_INTF_USB = 7;

const int VI_PROT_NORMAL = 1;
const int VI_PROT_FDC = 2;
const int VI_PROT_HS488 = 3;
const int VI_PROT_4882_STRS = 4;
const int VI_PROT_USBTMC_VENDOR = 5;

const int VI_FDC_NORMAL = 1;
const int VI_FDC_STREAM = 2;

const int VI_LOCAL_SPACE = 0;
const int VI_A16_SPACE = 1;
const int VI_A24_SPACE = 2;
const int VI_A32_SPACE = 3;
const int VI_A64_SPACE = 4;
const int VI_PXI_ALLOC_SPACE = 9;
const int VI_PXI_CFG_SPACE = 10;
const int VI_PXI_BAR0_SPACE = 11;
const int VI_PXI_BAR1_SPACE = 12;
const int VI_PXI_BAR2_SPACE = 13;
const int VI_PXI_BAR3_SPACE = 14;
const int VI_PXI_BAR4_SPACE = 15;
const int VI_PXI_BAR5_SPACE = 16;
const int VI_OPAQUE_SPACE = 0xFFFF;

const int VI_UNKNOWN_LA = -1;
const int VI_UNKNOWN_SLOT = -1;
const int VI_UNKNOWN_LEVEL = -1;
const int VI_UNKNOWN_CHASSIS = -1;

const int VI_QUEUE = 1;
const int VI_HNDLR = 2;
const int VI_SUSPEND_HNDLR = 4;
const int VI_ALL_MECH = 0xFFFF;

const int VI_ANY_HNDLR = 0;

const int VI_TRIG_ALL = -2;
const int VI_TRIG_SW = -1;
const int VI_TRIG_TTL0 = 0;
const int VI_TRIG_TTL1 = 1;
const int VI_TRIG_TTL2 = 2;
const int VI_TRIG_TTL3 = 3;
const int VI_TRIG_TTL4 = 4;
const int VI_TRIG_TTL5 = 5;
const int VI_TRIG_TTL6 = 6;
const int VI_TRIG_TTL7 = 7;
const int VI_TRIG_ECL0 = 8;
const int VI_TRIG_ECL1 = 9;
const int VI_TRIG_ECL2 = 10;
const int VI_TRIG_ECL3 = 11;
const int VI_TRIG_ECL4 = 12;
const int VI_TRIG_ECL5 = 13;
const int VI_TRIG_STAR_SLOT1 = 14;
const int VI_TRIG_STAR_SLOT2 = 15;
const int VI_TRIG_STAR_SLOT3 = 16;
const int VI_TRIG_STAR_SLOT4 = 17;
const int VI_TRIG_STAR_SLOT5 = 18;
const int VI_TRIG_STAR_SLOT6 = 19;
const int VI_TRIG_STAR_SLOT7 = 20;
const int VI_TRIG_STAR_SLOT8 = 21;
const int VI_TRIG_STAR_SLOT9 = 22;
const int VI_TRIG_STAR_SLOT10 = 23;
const int VI_TRIG_STAR_SLOT11 = 24;
const int VI_TRIG_STAR_SLOT12 = 25;
const int VI_TRIG_STAR_INSTR = 26;
const int VI_TRIG_PANEL_IN = 27;
const int VI_TRIG_PANEL_OUT = 28;
const int VI_TRIG_STAR_VXI0 = 29;
const int VI_TRIG_STAR_VXI1 = 30;
const int VI_TRIG_STAR_VXI2 = 31;
const int VI_TRIG_TTL8 = 32;
const int VI_TRIG_TTL9 = 33;
const int VI_TRIG_TTL10 = 34;
const int VI_TRIG_TTL11 = 35;

const int VI_TRIG_PROT_DEFAULT = 0;
const int VI_TRIG_PROT_ON = 1;
const int VI_TRIG_PROT_OFF = 2;
const int VI_TRIG_PROT_SYNC = 5;
const int VI_TRIG_PROT_RESERVE = 6;
const int VI_TRIG_PROT_UNRESERVE = 7;

const int VI_READ_BUF = 1;
const int VI_WRITE_BUF = 2;
const int VI_READ_BUF_DISCARD = 4;
const int VI_WRITE_BUF_DISCARD = 8;
const int VI_IO_IN_BUF = 16;
const int VI_IO_OUT_BUF = 32;
const int VI_IO_IN_BUF_DISCARD = 64;
const int VI_IO_OUT_BUF_DISCARD = 128;

const int VI_FLUSH_ON_ACCESS = 1;
const int VI_FLUSH_WHEN_FULL = 2;
const int VI_FLUSH_DISABLE = 3;

const int VI_NMAPPED = 1;
const int VI_USE_OPERS = 2;
const int VI_DEREF_ADDR = 3;
const int VI_DEREF_ADDR_BYTE_SWAP = 4;

const int VI_TMO_IMMEDIATE = 0;
const int VI_TMO_INFINITE = 0xFFFFFFFF;

const int VI_NO_LOCK = 0;
const int VI_EXCLUSIVE_LOCK = 1;
const int VI_SHARED_LOCK = 2;
const int VI_LOAD_CONFIG = 4;

const int VI_NO_SEC_ADDR = 0xFFFF;

const int VI_ASRL_PAR_NONE = 0;
const int VI_ASRL_PAR_ODD = 1;
const int VI_ASRL_PAR_EVEN = 2;
const int VI_ASRL_PAR_MARK = 3;
const int VI_ASRL_PAR_SPACE = 4;

const int VI_ASRL_STOP_ONE = 10;
const int VI_ASRL_STOP_ONE5 = 15;
const int VI_ASRL_STOP_TWO = 20;

const int VI_ASRL_FLOW_NONE = 0;
const int VI_ASRL_FLOW_XON_XOFF = 1;
const int VI_ASRL_FLOW_RTS_CTS = 2;
const int VI_ASRL_FLOW_DTR_DSR = 4;

const int VI_ASRL_END_NONE = 0;
const int VI_ASRL_END_LAST_BIT = 1;
const int VI_ASRL_END_TERMCHAR = 2;
const int VI_ASRL_END_BREAK = 3;

const int VI_STATE_ASSERTED = 1;
const int VI_STATE_UNASSERTED = 0;
const int VI_STATE_UNKNOWN = -1;

const int VI_BIG_ENDIAN = 0;
const int VI_LITTLE_ENDIAN = 1;

const int VI_DATA_PRIV = 0;
const int VI_DATA_NPRIV = 1;
const int VI_PROG_PRIV = 2;
const int VI_PROG_NPRIV = 3;
const int VI_BLCK_PRIV = 4;
const int VI_BLCK_NPRIV = 5;
const int VI_D64_PRIV = 6;
const int VI_D64_NPRIV = 7;
const int VI_D64_2EVME = 8;
const int VI_D64_SST160 = 9;
const int VI_D64_SST267 = 10;
const int VI_D64_SST320 = 11;

const int VI_WIDTH_8 = 1;
const int VI_WIDTH_16 = 2;
const int VI_WIDTH_32 = 4;
const int VI_WIDTH_64 = 8;

const int VI_GPIB_REN_DEASSERT = 0;
const int VI_GPIB_REN_ASSERT = 1;
const int VI_GPIB_REN_DEASSERT_GTL = 2;
const int VI_GPIB_REN_ASSERT_ADDRESS = 3;
const int VI_GPIB_REN_ASSERT_LLO = 4;
const int VI_GPIB_REN_ASSERT_ADDRESS_LLO = 5;
const int VI_GPIB_REN_ADDRESS_GTL = 6;

const int VI_GPIB_ATN_DEASSERT = 0;
const int VI_GPIB_ATN_ASSERT = 1;
const int VI_GPIB_ATN_DEASSERT_HANDSHAKE = 2;
const int VI_GPIB_ATN_ASSERT_IMMEDIATE = 3;

const int VI_GPIB_HS488_DISABLED = 0;
const int VI_GPIB_HS488_NIMPL = -1;

const int VI_GPIB_UNADDRESSED = 0;
const int VI_GPIB_TALKER = 1;
const int VI_GPIB_LISTENER = 2;

const int VI_VXI_CMD16 = 0x0200;
const int VI_VXI_CMD16_RESP16 = 0x0202;
const int VI_VXI_RESP16 = 0x0002;
const int VI_VXI_CMD32 = 0x0400;
const int VI_VXI_CMD32_RESP16 = 0x0402;
const int VI_VXI_CMD32_RESP32 = 0x0404;
const int VI_VXI_RESP32 = 0x0004;

const int VI_ASSERT_SIGNAL = -1;
const int VI_ASSERT_USE_ASSIGNED = 0;
const int VI_ASSERT_IRQ1 = 1;
const int VI_ASSERT_IRQ2 = 2;
const int VI_ASSERT_IRQ3 = 3;
const int VI_ASSERT_IRQ4 = 4;
const int VI_ASSERT_IRQ5 = 5;
const int VI_ASSERT_IRQ6 = 6;
const int VI_ASSERT_IRQ7 = 7;

const int VI_UTIL_ASSERT_SYSRESET = 1;
const int VI_UTIL_ASSERT_SYSFAIL = 2;
const int VI_UTIL_DEASSERT_SYSFAIL = 3;

const int VI_VXI_CLASS_MEMORY = 0;
const int VI_VXI_CLASS_EXTENDED = 1;
const int VI_VXI_CLASS_MESSAGE = 2;
const int VI_VXI_CLASS_REGISTER = 3;
const int VI_VXI_CLASS_OTHER = 4;

const int VI_PXI_ADDR_NONE = 0;
const int VI_PXI_ADDR_MEM = 1;
const int VI_PXI_ADDR_IO = 2;
const int VI_PXI_ADDR_CFG = 3;

const int VI_TRIG_UNKNOWN = -1;

const int VI_PXI_LBUS_UNKNOWN = -1;
const int VI_PXI_LBUS_NONE = 0;
const int VI_PXI_LBUS_STAR_TRIG_BUS_0 = 1000;
const int VI_PXI_LBUS_STAR_TRIG_BUS_1 = 1001;
const int VI_PXI_LBUS_STAR_TRIG_BUS_2 = 1002;
const int VI_PXI_LBUS_STAR_TRIG_BUS_3 = 1003;
const int VI_PXI_LBUS_STAR_TRIG_BUS_4 = 1004;
const int VI_PXI_LBUS_STAR_TRIG_BUS_5 = 1005;
const int VI_PXI_LBUS_STAR_TRIG_BUS_6 = 1006;
const int VI_PXI_LBUS_STAR_TRIG_BUS_7 = 1007;
const int VI_PXI_LBUS_STAR_TRIG_BUS_8 = 1008;
const int VI_PXI_LBUS_STAR_TRIG_BUS_9 = 1009;
const int VI_PXI_STAR_TRIG_CONTROLLER = 1413;

/*- Backward Compatibility Macros -------------------------------------------*/

const int VI_ERROR_INV_SESSION = VI_ERROR_INV_OBJECT;
const int VI_INFINITE = VI_TMO_INFINITE;
const int VI_NORMAL = VI_PROT_NORMAL;
const int VI_FDC = VI_PROT_FDC;
const int VI_HS488 = VI_PROT_HS488;
const int VI_ASRL488 = VI_PROT_4882_STRS;
const int VI_ASRL_IN_BUF = VI_IO_IN_BUF;
const int VI_ASRL_OUT_BUF = VI_IO_OUT_BUF;
const int VI_ASRL_IN_BUF_DISCARD = VI_IO_IN_BUF_DISCARD;
const int VI_ASRL_OUT_BUF_DISCARD = VI_IO_OUT_BUF_DISCARD;

/*- National Instruments ----------------------------------------------------*/

const int VI_ERROR_HW_NGENUINE = _VI_ERROR+0x3FFF00AA; /* BFFF00AA, -1073807190 */

const int VI_INTF_RIO = 8;
const int VI_INTF_FIREWIRE = 9;

const int VI_ATTR_SYNC_MXI_ALLOW_EN = 0x3FFF0161; /* ViBoolean, read/write */

/* This is for VXI SERVANT resources */

const int VI_EVENT_VXI_DEV_CMD = 0xBFFF200F;
const int VI_ATTR_VXI_DEV_CMD_TYPE = 0x3FFF4037; /* ViInt16, read-only */
const int VI_ATTR_VXI_DEV_CMD_VALUE = 0x3FFF4038; /* ViUInt32, read-only */

const int VI_VXI_DEV_CMD_TYPE_16 = 16;
const int VI_VXI_DEV_CMD_TYPE_32 = 32;

const int VI_VXI_RESP_NONE = 0;
const int VI_VXI_RESP_PROT_ERROR = -1;

/* This is for VXI TTL Trigger routing */

const int VI_ATTR_VXI_TRIG_LINES_EN = 0x3FFF4043;
const int VI_ATTR_VXI_TRIG_DIR = 0x3FFF4044;

/* This allows extended Serial support on Win32 and on NI ENET Serial products */

const int VI_ATTR_ASRL_DISCARD_NULL = 0x3FFF00B0;
const int VI_ATTR_ASRL_CONNECTED = 0x3FFF01BB;
const int VI_ATTR_ASRL_BREAK_STATE = 0x3FFF01BC;
const int VI_ATTR_ASRL_BREAK_LEN = 0x3FFF01BD;
const int VI_ATTR_ASRL_ALLOW_TRANSMIT = 0x3FFF01BE;
const int VI_ATTR_ASRL_WIRE_MODE = 0x3FFF01BF;

const int VI_ASRL_WIRE_485_4 = 0;
const int VI_ASRL_WIRE_485_2_DTR_ECHO = 1;
const int VI_ASRL_WIRE_485_2_DTR_CTRL = 2;
const int VI_ASRL_WIRE_485_2_AUTO = 3;
const int VI_ASRL_WIRE_232_DTE = 128;
const int VI_ASRL_WIRE_232_DCE = 129;
const int VI_ASRL_WIRE_232_AUTO = 130;

const int VI_EVENT_ASRL_BREAK = 0x3FFF2023;
const int VI_EVENT_ASRL_CTS = 0x3FFF2029;
const int VI_EVENT_ASRL_DSR = 0x3FFF202A;
const int VI_EVENT_ASRL_DCD = 0x3FFF202C;
const int VI_EVENT_ASRL_RI = 0x3FFF202E;
const int VI_EVENT_ASRL_CHAR = 0x3FFF2035;
const int VI_EVENT_ASRL_TERMCHAR = 0x3FFF2024;

/* The following 2 attributes were incorrectly implemented in earlier
   versions of NI-VISA.  You should now query VI_ATTR_MANF_ID or
   VI_ATTR_MODEL_CODE.  Those attributes contain sub-vendor information
   when it exists.  To get both the actual primary and subvendor codes
   from the device, you should call viIn16 using VI_PXI_CFG_SPACE. */

const int VI_ATTR_PXI_SUB_MANF_ID = 0x3FFF0203;
const int VI_ATTR_PXI_SUB_MODEL_CODE = 0x3FFF0204;

const int VI_ATTR_PXI_USE_PREALLOC_POOL = 0x3FFF020F;

const int VI_ATTR_USB_BULK_OUT_PIPE = 0x3FFF01A2;
const int VI_ATTR_USB_BULK_IN_PIPE = 0x3FFF01A3;
const int VI_ATTR_USB_INTR_IN_PIPE = 0x3FFF01A4;
const int VI_ATTR_USB_CLASS = 0x3FFF01A5;
const int VI_ATTR_USB_SUBCLASS = 0x3FFF01A6;
const int VI_ATTR_USB_ALT_SETTING = 0x3FFF01A8;
const int VI_ATTR_USB_END_IN = 0x3FFF01A9;
const int VI_ATTR_USB_NUM_INTFCS = 0x3FFF01AA;
const int VI_ATTR_USB_NUM_PIPES = 0x3FFF01AB;
const int VI_ATTR_USB_BULK_OUT_STATUS = 0x3FFF01AC;
const int VI_ATTR_USB_BULK_IN_STATUS = 0x3FFF01AD;
const int VI_ATTR_USB_INTR_IN_STATUS = 0x3FFF01AE;
const int VI_ATTR_USB_CTRL_PIPE = 0x3FFF01B0;

const int VI_USB_PIPE_STATE_UNKNOWN = -1;
const int VI_USB_PIPE_READY = 0;
const int VI_USB_PIPE_STALLED = 1;

const int VI_USB_END_NONE = 0;
const int VI_USB_END_SHORT = 4;
const int VI_USB_END_SHORT_OR_COUNT = 5;


const int VI_ATTR_FIREWIRE_DEST_UPPER_OFFSET = 0x3FFF01F0;
const int VI_ATTR_FIREWIRE_SRC_UPPER_OFFSET = 0x3FFF01F1;
const int VI_ATTR_FIREWIRE_WIN_UPPER_OFFSET = 0x3FFF01F2;
const int VI_ATTR_FIREWIRE_VENDOR_ID = 0x3FFF01F3;
const int VI_ATTR_FIREWIRE_LOWER_CHIP_ID = 0x3FFF01F4;
const int VI_ATTR_FIREWIRE_UPPER_CHIP_ID = 0x3FFF01F5;

const int VI_FIREWIRE_DFLT_SPACE = 5;

/*= from visatype.h =================================*/

/*- Completion and Error Codes ----------------------------------------------*/

const int VI_SUCCESS = 0;

/*- Other VISA Definitions --------------------------------------------------*/

const int VI_NULL = 0;

const int VI_TRUE = 1;
const int VI_FALSE = 0;